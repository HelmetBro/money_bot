quote {'T': 'q', 'S': 'AAPL', 'bx': 'V', 'bp': 133.56, 'bs': 4, 'ax': 'V', 'ap': 133.58, 'as': 1, 't': Timestamp(seconds=1619717344, nanoseconds=627787843), 'c': ['R'], 'z': 'C'}
quote {'T': 'q', 'S': 'AAPL', 'bx': 'V', 'bp': 133.56, 'bs': 5, 'ax': 'V', 'ap': 133.58, 'as': 1, 't': Timestamp(seconds=1619717344, nanoseconds=650423884), 'c': ['R'], 'z': 'C'}
quote {'T': 'q', 'S': 'AAPL', 'bx': 'V', 'bp': 133.56, 'bs': 5, 'ax': 'V', 'ap': 134.2, 'as': 1, 't': Timestamp(seconds=1619717344, nanoseconds=652114547), 'c': ['R'], 'z': 'C'}
quote {'T': 'q', 'S': 'AAPL', 'bx': 'V', 'bp': 133.56, 'bs': 5, 'ax': 'V', 'ap': 134.2, 'as': 1, 't': Timestamp(seconds=1619717344, nanoseconds=652122371), 'c': ['R'], 'z': 'C'}
quote {'T': 'q', 'S': 'AAPL', 'bx': 'V', 'bp': 133.57, 'bs': 3, 'ax': 'V', 'ap': 134.2, 'as': 1, 't': Timestamp(seconds=1619717344, nanoseconds=652441099), 'c': ['R'], 'z': 'C'}
quote {'T': 'q', 'S': 'AAPL', 'bx': 'V', 'bp': 133.57, 'bs': 4, 'ax': 'V', 'ap': 134.2, 'as': 1, 't': Timestamp(seconds=1619717344, nanoseconds=652471597), 'c': ['R'], 'z': 'C'}
quote {'T': 'q', 'S': 'MSFT', 'bx': 'V', 'bp': 250.0, 'bs': 1, 'ax': 'V', 'ap': 251.44, 'as': 2, 't': Timestamp(seconds=1619717344, nanoseconds=659163814), 'c': ['R'], 'z': 'C'}



quote {'T': 'q', 'S': 'TSLA', 'bx': 'V', 'bp': 673.25, 'bs': 1, 'ax': 'V', 'ap': 696.28, 'as': 1, 't': Timestamp(seconds=1619717343, nanoseconds=555812370), 'c': ['R'], 'z': 'C'}
quote {'T': 'q', 'S': 'MSFT', 'bx': 'V', 'bp': 250.0, 'bs': 1, 'ax': 'V', 'ap': 251.4, 'as': 1, 't': Timestamp(seconds=1619717344, nanoseconds=267471703), 'c': ['R'], 'z': 'C'}
quote {'T': 'q', 'S': 'MSFT', 'bx': 'V', 'bp': 250.0, 'bs': 1, 'ax': 'V', 'ap': 251.41, 'as': 2, 't': Timestamp(seconds=1619717344, nanoseconds=268791960), 'c': ['R'], 'z': 'C'}
quote {'T': 'q', 'S': 'AAPL', 'bx': 'V', 'bp': 133.57, 'bs': 3, 'ax': 'V', 'ap': 134.2, 'as': 1, 't': Timestamp(seconds=1619717344, nanoseconds=624947511), 'c': ['R'], 'z': 'C'}
quote {'T': 'q', 'S': 'AAPL', 'bx': 'V', 'bp': 133.56, 'bs': 3, 'ax': 'V', 'ap': 134.2, 'as': 1, 't': Timestamp(seconds=1619717344, nanoseconds=624983813), 'c': ['R'], 'z': 'C'}
quote {'T': 'q', 'S': 'TSLA', 'bx': 'V', 'bp': 668.0, 'bs': 1, 'ax': 'V', 'ap': 696.28, 'as': 1, 't': Timestamp(seconds=1619717344, nanoseconds=625824404), 'c': ['R'], 'z': 'C'}



trade {'T': 't', 'i': 9264, 'S': 'MSFT', 'x': 'V', 'p': 251.33, 's': 1, 't': Timestamp(seconds=1619717413, nanoseconds=914339602), 'c': ['@', 'I'], 'z': 'C'}
trade {'T': 't', 'i': 9265, 'S': 'MSFT', 'x': 'V', 'p': 251.315, 's': 1, 't': Timestamp(seconds=1619717415, nanoseconds=914821813), 'c': ['@', 'I'], 'z': 'C'}
trade {'T': 't', 'i': 9266, 'S': 'MSFT', 'x': 'V', 'p': 251.3, 's': 17, 't': Timestamp(seconds=1619717417, nanoseconds=346975696), 'c': ['@', 'I'], 'z': 'C'}
trade {'T': 't', 'i': 9267, 'S': 'MSFT', 'x': 'V', 'p': 251.3, 's': 19, 't': Timestamp(seconds=1619717417, nanoseconds=432226965), 'c': ['@', 'I'], 'z': 'C'}
trade {'T': 't', 'i': 17287, 'S': 'AAPL', 'x': 'V', 'p': 133.45, 's': 100, 't': Timestamp(seconds=1619717417, nanoseconds=643864296), 'c': ['@'], 'z': 'C'}
trade {'T': 't', 'i': 17288, 'S': 'AAPL', 'x': 'V', 'p': 133.45, 's': 50, 't': Timestamp(seconds=1619717417, nanoseconds=643864296), 'c': ['@', 'I'], 'z': 'C'}
trade {'T': 't', 'i': 9268, 'S': 'MSFT', 'x': 'V', 'p': 251.315, 's': 2, 't': Timestamp(seconds=1619717417, nanoseconds=913937000), 'c': ['@', 'I'], 'z': 'C'}
trade {'T': 't', 'i': 12032, 'S': 'TSLA', 'x': 'V', 'p': 673.14, 's': 1, 't': Timestamp(seconds=1619717418, nanoseconds=21349094), 'c': ['@', 'I'], 'z': 'C'}
trade {'T': 't', 'i': 9269, 'S': 'MSFT', 'x': 'V', 'p': 251.31, 's': 1, 't': Timestamp(seconds=1619717420, nanoseconds=914391872), 'c': ['@', 'I'], 'z': 'C'}



bars {'T': 'b', 'S': 'TSLA', 'o': 672.94, 'h': 672.94, 'l': 672.61, 'c': 672.81, 'v': 729, 't': Timestamp(seconds=1619717580, nanoseconds=0)}
bars {'T': 'b', 'S': 'AAPL', 'o': 133.49, 'h': 133.5, 'l': 133.325, 'c': 133.33, 'v': 3436, 't': Timestamp(seconds=1619717580, nanoseconds=0)}
bars {'T': 'b', 'S': 'TSLA', 'o': 672.85, 'h': 673.83, 'l': 672.85, 'c': 673.69, 'v': 6728, 't': Timestamp(seconds=1619717640, nanoseconds=0)}
bars {'T': 'b', 'S': 'MSFT', 'o': 251.2, 'h': 251.25, 'l': 251.185, 'c': 251.245, 'v': 2752, 't': Timestamp(seconds=1619717640, nanoseconds=0)}
bars {'T': 'b', 'S': 'AAPL', 'o': 133.31, 'h': 133.4, 'l': 133.31, 'c': 133.38, 'v': 2441, 't': Timestamp(seconds=1619717640, nanoseconds=0)}
bars {'T': 'b', 'S': 'TSLA', 'o': 673.78, 'h': 674.245, 'l': 673.78, 'c': 674.245, 'v': 1795, 't': Timestamp(seconds=1619717700, nanoseconds=0)}
bars {'T': 'b', 'S': 'MSFT', 'o': 251.265, 'h': 251.335, 'l': 251.25, 'c': 251.25, 'v': 2236, 't': Timestamp(seconds=1619717700, nanoseconds=0)}
bars {'T': 'b', 'S': 'AAPL', 'o': 133.37, 'h': 133.39, 'l': 133.37, 'c': 133.38, 'v': 895, 't': Timestamp(seconds=1619717700, nanoseconds=0)}


order = api.submit_order(symbol = 'AAPL',side = 'buy', type = 'market', notional = 400,time_in_force = 'fok')

Entity({'event': 'new', 'order': {a:b, c:d, e:f}})


Entity({   'event': 'new',
'order': {   'asset_class': 'us_equity',
                'asset_id': 'b0b6dd9d-8b9b-48a9-ba46-b9d54906e415',
                'canceled_at': None,
                'client_order_id': '2f26a73a-9c8a-4350-aa2d-a88c9bc2cc15',
                'created_at': '2021-05-06T19:14:23.844514Z',
                'expired_at': None,
                'extended_hours': False,
                'failed_at': None,
                'filled_at': None,
                'filled_avg_price': None,
                'filled_qty': '0',
                'hwm': None,
                'id': '6ddec71c-8ba1-4357-8764-a2c6e55fb94e',
                'legs': None,
                'limit_price': None,
                'notional': None,
                'order_class': '',
                'order_type': 'market',
                'qty': '400',
                'replaced_at': None,
                'replaced_by': None,
                'replaces': None,
                'side': 'buy',
                'status': 'new',
                'stop_price': None,
                'submitted_at': '2021-05-06T19:14:23.834082Z',
                'symbol': 'AAPL',
                'time_in_force': 'fok',
                'trail_percent': None,
                'trail_price': None,
                'type': 'market',
                'updated_at': '2021-05-06T19:14:23.865515Z'}})
Entity({   'event': 'fill',
'order': {   'asset_class': 'us_equity',
                'asset_id': 'b0b6dd9d-8b9b-48a9-ba46-b9d54906e415',
                'canceled_at': None,
                'client_order_id': '2f26a73a-9c8a-4350-aa2d-a88c9bc2cc15',
                'created_at': '2021-05-06T19:14:23.844514Z',
                'expired_at': None,
                'extended_hours': False,
                'failed_at': None,
                'filled_at': '2021-05-06T19:14:24.106854Z',
                'filled_avg_price': '129.07',
                'filled_qty': '400',
                'hwm': None,
                'id': '6ddec71c-8ba1-4357-8764-a2c6e55fb94e',
                'legs': None,
                'limit_price': None,
                'notional': None,
                'order_class': '',
                'order_type': 'market',
                'qty': '400',
                'replaced_at': None,
                'replaced_by': None,
                'replaces': None,
                'side': 'buy',
                'status': 'filled',
                'stop_price': None,
                'submitted_at': '2021-05-06T19:14:23.834082Z',
                'symbol': 'AAPL',
                'time_in_force': 'fok',
                'trail_percent': None,
                'trail_price': None,
                'type': 'market',
                'updated_at': '2021-05-06T19:14:24.1163Z'},
'position_qty': '400',
'price': '129.07',
'qty': '400',
'timestamp': '2021-05-06T19:14:24.106854757Z'})


selling that market order

Entity({   'event': 'new',
'order': {   'asset_class': 'us_equity',
                'asset_id': 'b0b6dd9d-8b9b-48a9-ba46-b9d54906e415',
                'canceled_at': None,
                'client_order_id': '7c702cb5-0ea0-49a3-9da6-99629cd65112',
                'created_at': '2021-05-06T19:20:59.403353Z',
                'expired_at': None,
                'extended_hours': False,
                'failed_at': None,
                'filled_at': None,
                'filled_avg_price': None,
                'filled_qty': '0',
                'hwm': None,
                'id': '65060390-b503-41b9-ac10-25b4b8e7d6d0',
                'legs': None,
                'limit_price': None,
                'notional': None,
                'order_class': '',
                'order_type': 'market',
                'qty': '400',
                'replaced_at': None,
                'replaced_by': None,
                'replaces': None,
                'side': 'sell',
                'status': 'new',
                'stop_price': None,
                'submitted_at': '2021-05-06T19:20:59.401424Z',
                'symbol': 'AAPL',
                'time_in_force': 'fok',
                'trail_percent': None,
                'trail_price': None,
                'type': 'market',
                'updated_at': '2021-05-06T19:20:59.421839Z'}})
Entity({   'event': 'fill',
'order': {   'asset_class': 'us_equity',
                'asset_id': 'b0b6dd9d-8b9b-48a9-ba46-b9d54906e415',
                'canceled_at': None,
                'client_order_id': '7c702cb5-0ea0-49a3-9da6-99629cd65112',
                'created_at': '2021-05-06T19:20:59.403353Z',
                'expired_at': None,
                'extended_hours': False,
                'failed_at': None,
                'filled_at': '2021-05-06T19:20:59.906821Z',
                'filled_avg_price': '129.09',
                'filled_qty': '400',
                'hwm': None,
                'id': '65060390-b503-41b9-ac10-25b4b8e7d6d0',
                'legs': None,
                'limit_price': None,
                'notional': None,
                'order_class': '',
                'order_type': 'market',
                'qty': '400',
                'replaced_at': None,
                'replaced_by': None,
                'replaces': None,
                'side': 'sell',
                'status': 'filled',
                'stop_price': None,
                'submitted_at': '2021-05-06T19:20:59.401424Z',
                'symbol': 'AAPL',
                'time_in_force': 'fok',
                'trail_percent': None,
                'trail_price': None,
                'type': 'market',
                'updated_at': '2021-05-06T19:20:59.914581Z'},
'position_qty': '0',
'price': '129.09',
'qty': '400',
'timestamp': '2021-05-06T19:20:59.906821106Z'}



buying limit order

Entity({   'event': 'new',
'order': {   'asset_class': 'us_equity',
                'asset_id': 'b0b6dd9d-8b9b-48a9-ba46-b9d54906e415',
                'canceled_at': None,
                'client_order_id': 'aa2e846e-f615-4907-8709-6bde7c1c5c9f',
                'created_at': '2021-05-06T19:22:02.922979Z',
                'expired_at': None,
                'extended_hours': False,
                'failed_at': None,
                'filled_at': None,
                'filled_avg_price': None,
                'filled_qty': '0',
                'hwm': None,
                'id': '89738131-85e9-4185-9311-0fd27af38a95',
                'legs': None,
                'limit_price': '130',
                'notional': None,
                'order_class': '',
                'order_type': 'limit',
                'qty': '200',
                'replaced_at': None,
                'replaced_by': None,
                'replaces': None,
                'side': 'buy',
                'status': 'new',
                'stop_price': None,
                'submitted_at': '2021-05-06T19:22:02.91654Z',
                'symbol': 'AAPL',
                'time_in_force': 'day',
                'trail_percent': None,
                'trail_price': None,
                'type': 'limit',
                'updated_at': '2021-05-06T19:22:02.941157Z'}})
Entity({   'event': 'fill',
'order': {   'asset_class': 'us_equity',
                'asset_id': 'b0b6dd9d-8b9b-48a9-ba46-b9d54906e415',
                'canceled_at': None,
                'client_order_id': 'aa2e846e-f615-4907-8709-6bde7c1c5c9f',
                'created_at': '2021-05-06T19:22:02.922979Z',
                'expired_at': None,
                'extended_hours': False,
                'failed_at': None,
                'filled_at': '2021-05-06T19:22:03.145363Z',
                'filled_avg_price': '129.14',
                'filled_qty': '200',
                'hwm': None,
                'id': '89738131-85e9-4185-9311-0fd27af38a95',
                'legs': None,
                'limit_price': '130',
                'notional': None,
                'order_class': '',
                'order_type': 'limit',
                'qty': '200',
                'replaced_at': None,
                'replaced_by': None,
                'replaces': None,
                'side': 'buy',
                'status': 'filled',
                'stop_price': None,
                'submitted_at': '2021-05-06T19:22:02.91654Z',
                'symbol': 'AAPL',
                'time_in_force': 'day',
                'trail_percent': None,
                'trail_price': None,
                'type': 'limit',
                'updated_at': '2021-05-06T19:22:03.154438Z'},
'position_qty': '200',
'price': '129.14',
'qty': '200',
'timestamp': '2021-05-06T19:22:03.145363403Z'})


sell limit order was too high, and fok, so it canceled automatically

Entity({   'event': 'new',
'order': {   'asset_class': 'us_equity',
                'asset_id': 'b0b6dd9d-8b9b-48a9-ba46-b9d54906e415',
                'canceled_at': None,
                'client_order_id': 'd0d164e6-d719-4e8e-ae6a-10ce05872988',
                'created_at': '2021-05-06T19:23:55.871264Z',
                'expired_at': None,
                'extended_hours': False,
                'failed_at': None,
                'filled_at': None,
                'filled_avg_price': None,
                'filled_qty': '0',
                'hwm': None,
                'id': '2756faf7-be80-48d9-a72a-95a171afad2d',
                'legs': None,
                'limit_price': '200',
                'notional': None,
                'order_class': '',
                'order_type': 'limit',
                'qty': '1',
                'replaced_at': None,
                'replaced_by': None,
                'replaces': None,
                'side': 'sell',
                'status': 'new',
                'stop_price': None,
                'submitted_at': '2021-05-06T19:23:55.869344Z',
                'symbol': 'AAPL',
                'time_in_force': 'fok',
                'trail_percent': None,
                'trail_price': None,
                'type': 'limit',
                'updated_at': '2021-05-06T19:23:55.891038Z'}})
Entity({   'event': 'canceled',
'order': {   'asset_class': 'us_equity',
                'asset_id': 'b0b6dd9d-8b9b-48a9-ba46-b9d54906e415',
                'canceled_at': '2021-05-06T19:23:56.377423Z',
                'client_order_id': 'd0d164e6-d719-4e8e-ae6a-10ce05872988',
                'created_at': '2021-05-06T19:23:55.871264Z',
                'expired_at': None,
                'extended_hours': False,
                'failed_at': None,
                'filled_at': None,
                'filled_avg_price': None,
                'filled_qty': '0',
                'hwm': None,
                'id': '2756faf7-be80-48d9-a72a-95a171afad2d',
                'legs': None,
                'limit_price': '200',
                'notional': None,
                'order_class': '',
                'order_type': 'limit',
                'qty': '1',
                'replaced_at': None,
                'replaced_by': None,
                'replaces': None,
                'side': 'sell',
                'status': 'canceled',
                'stop_price': None,
                'submitted_at': '2021-05-06T19:23:55.869344Z',
                'symbol': 'AAPL',
                'time_in_force': 'fok',
                'trail_percent': None,
                'trail_price': None,
                'type': 'limit',
                'updated_at': '2021-05-06T19:23:56.390535Z'},
'timestamp': '2021-05-06T19:23:56.377423767Z'})




print(account)

Account({   'account_blocked': False,
'account_number': 'PA2738F91GE4',
'buying_power': '800000',
'cash': '200002',
'created_at': '2021-02-16T01:34:19.128021Z',
'currency': 'USD',
'daytrade_count': 2,
'daytrading_buying_power': '800000',
'equity': '200002',
'id': '13fd1109-1a47-4941-8fd0-16b0b64c0d71',
'initial_margin': '0',
'last_equity': '200000',
'last_maintenance_margin': '0',
'long_market_value': '0',
'maintenance_margin': '0',
'multiplier': '4',
'pattern_day_trader': False,
'portfolio_value': '200002',
'regt_buying_power': '400004',
'short_market_value': '0',
'shorting_enabled': True,
'sma': '0',
'status': 'ACTIVE',
'trade_suspended_by_user': False,
'trading_blocked': False,
'transfers_blocked': False})





print(api.list_positions())

[Position({   'asset_class': 'us_equity',
'asset_id': '8ccae427-5dd0-45b3-b5fe-7ba5e422c766',
'avg_entry_price': '659.79',
'change_today': '-0.018004590574418',
'cost_basis': '21773.07',
'current_price': '658.86',
'exchange': 'NASDAQ',
'lastday_price': '670.94',
'market_value': '21742.38',
'qty': '33',
'side': 'long',
'symbol': 'TSLA',
'unrealized_intraday_pl': '-30.69',
'unrealized_intraday_plpc': '-0.0014095393988996',
'unrealized_pl': '-30.69',
'unrealized_plpc': '-0.0014095393988996'}), Position({   'asset_class': 'us_equity',
'asset_id': 'b6d1aa75-5c9c-4353-a305-9e2caa1925ab',
'avg_entry_price': '248.12',
'change_today': '0.0065728080496612',
'cost_basis': '77165.32',
'current_price': '248.09',
'exchange': 'NASDAQ',
'lastday_price': '246.47',
'market_value': '77155.99',
'qty': '311',
'side': 'long',
'symbol': 'MSFT',
'unrealized_intraday_pl': '-9.33',
'unrealized_intraday_plpc': '-0.0001209092374657',
'unrealized_pl': '-9.33',
'unrealized_plpc': '-0.0001209092374657'}), Position({   'asset_class': 'us_equity',
'asset_id': 'b0b6dd9d-8b9b-48a9-ba46-b9d54906e415',
'avg_entry_price': '129.11',
'change_today': '0.0079625292740047',
'cost_basis': '16009.64',
'current_price': '129.12',
'exchange': 'NASDAQ',
'lastday_price': '128.1',
'market_value': '16010.88',
'qty': '124',
'side': 'long',
'symbol': 'AAPL',
'unrealized_intraday_pl': '1.24',
'unrealized_intraday_plpc': '0.000077453334366',
'unrealized_pl': '1.24',
'unrealized_plpc': '0.000077453334366'})]




print(api.get_asset('AAPL'))

Asset({   'class': 'us_equity',
'easy_to_borrow': True,
'exchange': 'NASDAQ',
'fractionable': True,
'id': 'b0b6dd9d-8b9b-48a9-ba46-b9d54906e415',
'marginable': True,
'name': 'Apple Inc. Common Stock',
'shortable': True,
'status': 'active',
'symbol': 'AAPL',
'tradable': True})



print(api.get_last_trade('AAPL'))

Trade({   'cond1': 0,
'cond2': 0,
'cond3': 0,
'cond4': 0,
'exchange': 15,
'price': 129.07,
'size': 100,
'timestamp': 1620329526900231263})


print(api.get_last_quote('AAPL'))
Quote({   'askexchange': 15,
'askprice': 129.1,
'asksize': 1,
'bidexchange': 15,
'bidprice': 129.09,
'bidsize': 1,
'timestamp': 1620329545343709487})





print(b['t'])
print(b['t'].seconds)
print(b['t'].nanoseconds)
Timestamp(seconds=1620330360, nanoseconds=0)
1620330360
0
























{'T': 'b', 'S': 'TSLA', 'o': 587.11, 'h': 587.11, 'l': 586.98, 'c': 586.98, 'v': 884, 't': Timestamp(seconds=1621017840, nanoseconds=0)}
AAPL -> macd_signal: 0.009946472359784353, rsi: 75.99999999999909 no trade signal thrown
liquidating asset: TSLA
Exception in thread Thread-2:
Traceback (most recent call last):
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 160, in _one_request
    resp.raise_for_status()
  File "/home/pi/.local/lib/python3.9/site-packages/requests/models.py", line 943, in raise_for_status
    raise HTTPError(http_error_msg, response=self)
requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://paper-api.alpaca.markets/v2/positions/TSLA

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.9/threading.py", line 950, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.9/threading.py", line 888, in run
    self._target(*self._args, **self._kwargs)
  File "/home/pi/stock_bot_alpaca/transaction.py", line 11, in listen
    transaction.submit(api)
  File "/home/pi/stock_bot_alpaca/transaction.py", line 43, in submit
    return api.close_position(self.ticker)
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 421, in close_position
    resp = self.delete('/positions/{}'.format(symbol))
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 188, in delete
    return self._request('DELETE', path, data)
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 139, in _request
    return self._one_request(method, url, opts, retry)
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 168, in _one_request
    raise APIError(error, http_error)
alpaca_trade_api.rest.APIError: position does not exist
{'T': 'b', 'S': 'TSLA', 'o': 587.21, 'h': 587.31, 'l': 587.03, 'c': 587.21, 'v': 2275, 't': Timestamp(seconds=1621017900, nanoseconds=0)}












TSLA -> macd_signal: 0.13291920777057134, rsi: 37.44131455399061 no trade signal thrown
Must have equal len keys and value when setting with an iterable
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/multiprocessing/queues.py", line 245, in _feed
    obj = _ForkingPickler.dumps(obj)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/multiprocessing/reduction.py", line 51, in dumps
    cls(buf, protocol).dump(obj)
TypeError: cannot pickle 'traceback' object
Traceback (most recent call last):
  File "/Users/eric/stock_bot_alpaca/infrastructure.py", line 235, in work
    algorithm.run()
  File "/Users/eric/stock_bot_alpaca/macd_rsi.py", line 44, in run
    bars = super().on_bars_get(self.long_period_macd)
  File "/Users/eric/stock_bot_alpaca/algorithm.py", line 85, in on_bars_get
    self.on_bars()
  File "/Users/eric/stock_bot_alpaca/algorithm.py", line 77, in on_bars
    self.live_bars_data_pd.loc[len(self.live_bars_data_pd)] = self.bars_data
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/core/indexing.py", line 692, in __setitem__
    iloc._setitem_with_indexer(indexer, value, self.name)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/core/indexing.py", line 1635, in _setitem_with_indexer
    self._setitem_with_indexer_split_path(indexer, value, name)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/core/indexing.py", line 1711, in _setitem_with_indexer_split_path
    raise ValueError(
ValueError: Must have equal len keys and value when setting with an iterable
Traceback (most recent call last):
  File "/Users/eric/stock_bot_alpaca/run.py", line 28, in <module>
    infrastructure.main()
  File "/Users/eric/stock_bot_alpaca/infrastructure.py", line 150, in main
    start_loop(positions, float(account.cash))
  File "/Users/eric/stock_bot_alpaca/infrastructure.py", line 217, in start_loop
    asyncio.run(bars_callback(copy.deepcopy(tsla_bars[x])))
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/runners.py", line 44, in run
    return loop.run_until_complete(main)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/Users/eric/stock_bot_alpaca/infrastructure.py", line 119, in bars_callback
    stream['writer'].send(b)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/multiprocessing/connection.py", line 211, in send
    self._send_bytes(_ForkingPickler.dumps(obj))
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/multiprocessing/connection.py", line 416, in _send_bytes
    self._send(header + buf)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/multiprocessing/connection.py", line 373, in _send
    n = write(self._handle, buf)
BrokenPipeError: [Errno 32] Broken pipe

terminating child process 8156
terminating child process 8157
terminating child process 8158
terminating child process 8159
terminating child process 8160
terminating main process 8154
fish: Job 1, 'python3  $argv' terminated by signal SIGABRT (Abort)
/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 3 leaked semaphore objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '





















    self.updates_queue.put(listener.recv())
  File "/usr/local/lib/python3.9/multiprocessing/connection.py", line 256, in recv
    return _ForkingPickler.loads(buf.getbuffer())
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/entity.py", line 19, in __getattr__
    if key in self._raw:
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/entity.py", line 19, in __getattr__
    if key in self._raw:
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/entity.py", line 19, in __getattr__
    if key in self._raw:
  [Previous line repeated 991 more times]
RecursionError: maximum recursion depth exceeded
Exception in thread Thread-6:
Traceback (most recent call last):
  File "/usr/local/lib/python3.9/threading.py", line 950, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.9/threading.py", line 888, in run
    self._target(*self._args, **self._kwargs)
  File "/home/pi/stock_bot_alpaca/listener.py", line 31, in updates_listener
    self.updates_queue.put(listener.recv())
  File "/usr/local/lib/python3.9/multiprocessing/connection.py", line 256, in recv
    return _ForkingPickler.loads(buf.getbuffer())
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/entity.py", line 19, in __getattr__
    if key in self._raw:
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/entity.py", line 19, in __getattr__
    if key in self._raw:
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/entity.py", line 19, in __getattr__
    if key in self._raw:
  [Previous line repeated 991 more times]
RecursionError: maximum recursion depth exceeded






https://stackoverflow.com/questions/54101923/1006-connection-closed-abnormally-error-with-python-3-7-websockets

2021-05-20 10:43:44,833 | subscribed to trades: ['MSFT', 'TSLA', 'QQQ', 'SPY', 'AAPL'], quotes: ['TSLA', 'QQQ', 'AAPL', 'MSFT', 'SPY'] and bars: ['AAPL', 'QQQ', 'SPY', 'MSFT', 'TSLA']
2021-05-20 12:57:35,870 | websocket error, restarting connection: code = 1006 (connection closed abnormally [internal]), no reason









AAPL -> macd_signal: -0.008126373848864117, rsi: 54.5454545454569 no trade signal thrown
submitted order: ticker [MSFT] transaction type [quantity] side [buy] order type [market] value [80] tif [fok]
Traceback (most recent call last):
  File "/home/pi/stock_bot_alpaca/listener.py", line 46, in updates_listener
    self.updates_queue.put(listener.recv())
  File "/usr/local/lib/python3.9/multiprocessing/connection.py", line 256, in recv
    return _ForkingPickler.loads(buf.getbuffer())
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/entity.py", line 19, in __getattr__
    if key in self._raw:
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/entity.py", line 19, in __getattr__
    if key in self._raw:
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/entity.py", line 19, in __getattr__
    if key in self._raw:
  [Previous line repeated 991 more times]
RecursionError: maximum recursion depth exceeded
maximum recursion depth exceeded
AAPL -> macd_signal: -0.0034666132001898702, rsi: 33.33333333333333 no trade signal thrown
QQQ -> macd_signal: -0.005070745985487221, rsi: 72.22222222220293 no trade signal thrown
SPY -> macd_signal: -0.022313712292488904, rsi: 43.99999999999545 no trade signal thrown








SPY -> macd_signal: 0.007031738594352854, rsi: 100.0 no trade signal thrown
qty
AAPL -> macd_signal: 0.0004591092996996046, rsi: 100.0 no trade signal thrown
MSFT -> macd_signal: -0.002988189444885672, rsi: 100.0 liquidating!
liquidating asset: MSFT
Exception in thread Thread-2:
Traceback (most recent call last):
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 161, in _one_request
    resp.raise_for_status()
  File "/home/pi/.local/lib/python3.9/site-packages/requests/models.py", line 943, in raise_for_status
    raise HTTPError(http_error_msg, response=self)
requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://paper-api.alpaca.markets/v2/positions/MSFT

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.9/threading.py", line 950, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.9/threading.py", line 888, in run
    self._target(*self._args, **self._kwargs)
  File "/home/pi/stock_bot_alpaca/transaction.py", line 11, in listen
    transaction.submit(api)
  File "/home/pi/stock_bot_alpaca/transaction.py", line 42, in submit
    return api.close_position(self.ticker)
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 422, in close_position
    resp = self.delete('/positions/{}'.format(symbol))
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 189, in delete
    return self._request('DELETE', path, data)
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 140, in _request
    return self._one_request(method, url, opts, retry)
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 169, in _one_request
    raise APIError(error, http_error)
alpaca_trade_api.rest.APIError: position does not exist
AAPL -> macd_signal: -0.006614204233675501, rsi: 100.0 no trade signal thrown


SPY -> macd_signal: -0.004752508875269623, rsi: 12.244897959175148 no trade signal thrown
Exception in thread Thread-2:
Traceback (most recent call last):
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 161, in _one_request
    resp.raise_for_status()
  File "/home/pi/.local/lib/python3.9/site-packages/requests/models.py", line 943, in raise_for_status
    raise HTTPError(http_error_msg, response=self)
requests.exceptions.HTTPError: 422 Client Error: Unprocessable Entity for url: https://paper-api.alpaca.markets/v2/orders

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.9/threading.py", line 950, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.9/threading.py", line 888, in run
    self._target(*self._args, **self._kwargs)
  File "/home/pi/stock_bot_alpaca/transaction.py", line 11, in listen
    transaction.submit(api)
  File "/home/pi/stock_bot_alpaca/transaction.py", line 55, in submit
    order = api.submit_order(
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 342, in submit_order
    resp = self.post('/orders', params)
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 180, in post
    return self._request('POST', path, data)
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 140, in _request
    return self._one_request(method, url, opts, retry)
  File "/home/pi/.local/lib/python3.9/site-packages/alpaca_trade_api/rest.py", line 169, in _one_request
    raise APIError(error, http_error)
alpaca_trade_api.rest.APIError: qty must be > 0
MSFT -> macd_signal: 0.006900386247792768, rsi: 11.111111111104094 buying!
QQQ -> macd_signal: 0.0010286471245464154, rsi: 0.0 buying!





not actually buying!